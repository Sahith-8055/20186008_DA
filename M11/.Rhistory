12 + 8
12 - 8
12 * 8
12 / 8
12 + 8
12 - 8
12 * 8
12 / 8
for(i in 1:3) print(1:i)
for(i in 1:3) print(i)
typeof(x)
x <- "dataset"
typeof(x)
print(typeof(x))
typeof(x)
x = "dataset"
typeof(x)
x = "dataset"
movies <- read.table("Movies.txt", header = FALSE, sep = "|", quote = "\"")
setwd("E:/MSIT FILES/DA/datasets")
movies <- read.table("Movies.txt", header = FALSE, sep = "|", quote = "\"")
colnames(movies) <- c("ID","Title","ReleaseDate","VideoReleaseDate","IMDB","Unknown","Action","Adventure","Animation","Childrens","Comedy","Crime","Documentary","Drama","Fantasy","FilmNoir","Horror","Musical","Mystery","Romance","SciFi","Thriller","War","Western")
movies$ID <- NULL
movies$Title <- NULL
movies$ReleaseDate <- NULL
movies$VideoReleaseDate <- NULL
distances <- dist(movies[2:20], method = "euclidean")
clusterMovies <- hclust(distances, method = "ward.D")
plot(clusterMovies)
rect.hclust(clusterMovies, k = 4, border = "blue")
clusterGroups <- cutree(clusterMovies, k = 7)
sort(table(clusterGroups))
Cluster1 <- subset(movies, clusterGroups == 1)
nrow(Cluster1)
table(movies$Adventure, Cluster1$Adventure)
table(movies$Adventure)
colSums(subset(movies[2:20], clusterGroups == 1))
remove(Cluster1)
colSums(subset(movies[2:20], clusterGroups == 2))
colSums(subset(movies[2:20], clusterGroups == 3))
colSums(subset(movies[2:20], clusterGroups == 4))
colSums(subset(movies[2:20], clusterGroups == 5))
colSums(subset(movies[2:20], clusterGroups == 6))
colSums(subset(movies[2:20], clusterGroups == 7))
table(clusterGroups, movies$Adventure)
set.seed(1000)
kmc <- kmeans(movies[2:20], centers = 7)
str(kmc)
table(kmc$cluster)
sort(table(kmc$cluster))
table(clusterGroups, kmc$cluster)
colSums(kmc$cluster == 3)
215/652
colSums(subset(movies[2:20], kmc$cluster == 1))
colSums(subset(movies[2:20], kmc$cluster == 2))
colSums(subset(movies[2:20], kmc$cluster == 3))
colSums(subset(movies[2:20], kmc$cluster == 4))
colSums(subset(movies[2:20], kmc$cluster == 5))
colSums(subset(movies[2:20], kmc$cluster == 6))
colSums(subset(movies[2:20], kmc$cluster == 7))
rm(lsit)
rm(list = ls(all = TRUE))
energy <- read.csv("energy_readings.csv")
nrow(energy)
library(tm)
library(SnowballC)
corpus <- Corpus(VectorSource(energy$email))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm <- DocumentTermMatrix(corpus)
str(dtm)
str(energy)
energy <- read.csv("energy_readings.csv", stringsAsFactors = FALSE)
nrow(energy)
corpus <- Corpus(VectorSource(energy$email))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm <- DocumentTermMatrix(corpus)
str(dtm)
dtm
spdtm <- removeSparseTerms(dtm, 0.97)
spdtm
library(rpart)
library(rpart.plot)
set.seed(1500)
library(caTools)
newFrame <- as.data.frame(as.matrix(spdtm))
colnames(newFrame) <- make.names(colnames(newFrame))
str(newFrame)
newFrame$responsive <- energy$responsive
set.seed(1500)
split <- sample.split(newFrame$responsive, SplitRatio = 0.75)
Train <- subset(newFrame, split == TRUE)
Test <- subset(newFrame, split == FALSE)
CARTModel1 <- rpart(responsive ~ ., data = Train, method = "class")
predictCART1 <- predict(CARTModel1, newdata = Test)
predictCART1[1:10,]
tbl1 <- table(Test$responsive, predictCART1[,2] > 0.5)
tbl1
tbl1 <- table(Test$responsive, predictCART1[,2] > 0.6)
tbl1
sum(diag(tbl1)) / nrow(Test)
tbl1 <- table(Test$responsive, predictCART1[,2] > 0.5)
tbl1
tbl[4] / nrow(Test)
tbl1[4] / nrow(Test)
tbl1[4] / (174+19+16+5)
tbl1[4] / nrow(Test)
tbl2 <- table(Test$responsive, predictCART1[,2] > 0.7)
tbl1
tbl2
tbl1[4] / nrow(Test)
tbl3 <- table(Test$responsive, predictCART1[,2] > 0.9)
tbl3
tbl3[2] / nrow(Test)
tbl3[2]
tbl3[2] / (179+35)
tbl1[4]
tbl1[4] / nrow(Test)
tbl2[4] / nrow(Test)
tbl2
tbl4 <- table(Test$responsive, predictCART1[,2] >= 0.5)
tbl4
sum(diag(tbl4)) / nrow(Test)
tbl4 <- table(Test$responsive, predictCART1[,2] > 0.6)
tbl4
sum(diag(tbl4)) / nrow(Test)
tbl5 <- table(Test$responsive, predictCART1[,2] > 0.8)
tbl5
tbl4 <- table(Test$responsive, predictCART1 > 0.6)
tbl4 <- table(Test$responsive, predictCART1[,2] > 0.6)
predROCR <- prediction(predictCART1[,2], Test$responsive)
library(ROCR)
predROCR <- prediction(predictCART1[,2], Test$responsive)
perfROCR <- performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize = TRUE)
auc <- as.numeric(performance(predROCR, "auc")@y.values)
auc
abline(v = auc)
abline(h = auc)
plot(perfROCR, colorize = TRUE)
auc <- as.numeric(performance(predROCR, "auc")@y.values)
auc
abline(h = auc)
bank <- read.csv("bank-full.csv")
str(bank)
library(caTools)
set.seed(1000)
spl <- sample.split(bank$y, SplitRatio = 0.6)
Train <- subset(bank, spl == TRUE)
Test <- subset(bank, spl == FALSE)
model1 <- glm(y ~ age + balance + campaign + duration, data = Train, family = "binomial")
rm(list = ls(all = TRUE))
bank <- read.csv("bank-full.csv")
library(caTools)
set.seed(1000)
spl <- sample.split(bank$y, SplitRatio = 0.6)
Train <- subset(bank, spl == TRUE)
Test <- subset(bank, spl == FALSE)
model1 <- glm(y ~ age + balance + campaign + duration, data = Train, family = "binomial")
summary(model1)
model2 <- glm(y ~ age + balance + duration, data = Train, family = "binomial")
summary(model2)
predictModel1 <- predict(model1)
table(Train$y, predictModel1)
table(Train$y, predictModel1 >= 0.5)
table(Train$y == 0, predictModel1 >= 0.5)
table(Train$y, predictModel1 >= 0.5)
predictModel1 <- predict(model1, type = "response")
table(Train$y, predictModel1)
table(Train$y, predictModel1 >= 0.5)
522/(23605 + 348 + 2651 + 522)
23605 / (23605 + 348 + 2651 + 522)
predictTestModel1 <- predict(model1, newdata = Test, type = "response")
library(ROCR)
predROCR <- prediction(predictTestModel1, Test$y)
auc <- as.numeric(performance(predROCR, "auc")@y.values)
auc
library(rpart)
library(rpart.plot)
CARTModel1 <- rpart(y ~ age + balance + duration, data = Train)
prp(CARTModel1)
predictTestModel2 <- predict(model2, newdata = Test, type = "response")
predROCR2 <- prediction(predictTestModel2, Test$y)
auc2 <- as.numeric(performance(predROCR2, "auc")@y.values)
auc2
